#! /usr/bin/env python3

import os, subprocess, sys, time
from decimal import Decimal
from subprocess import PIPE

INPUT_FILES = [("camera0.nut", "v:0"), ("camera0.nut", "a:0"), ("screen0.nut", "v:0")]
AUDIO_FADE_TIME = 0.25 # In seconds
AUDIO_FADE_PROPORTION = 0.3 # Between 0 and 1
MAKEFILE_CAMERA_CHUNKS = 20
MAKEFILE_SCREEN_CHUNKS = 7

def first_frame_times():
    i = 1
    times = []
    for path, stream in INPUT_FILES:
        # Get the wall-clock time of the first frame
        c = subprocess.run([\
                "ffprobe", \
                "-i", path, \
                "-show_frames", \
                "-select_streams", stream, \
                "-print_format", "flat", \
                "-read_intervals", "%+#2"], \
            stdout=PIPE, stderr=None)
        assert c.returncode == 0

        ts = []
        for l in c.stdout.decode().split("\n"):
            if "pkt_pts_time=" in l:
                ts.append(int(Decimal(l.split("=")[1].replace("\"", "")) * 1000))
        assert(len(ts) == 2)
        # Correct for the muxer delay in ffmpeg which is 0.7s.
        times.append(ts[0] - 700)
    return times

def remove_undos(markers):
    i = 0
    while i < len(markers):
        if markers[i][1] == "undo":
            del markers[i]
            if i > 0:
                del markers[i - 1]
                i -= 1
        else:
            i += 1

def remove_first_rewinds(start_time, markers):
    # We have to treat the first rewind(s) differently
    default_scene = "mixed_scene"
    current_scene = default_scene
    i = 0
    seg_start = start_time
    time_deleted = 0
    while i < len(markers):
        (tm, tag) = markers[i]
        if tag == "safepoint":
            break
        elif tag == "rewind":
            time_deleted = markers[i][0] - start_time
            seg_start = markers[i][0]
            del markers[0:i+1]
            i = 0
        elif tag in ["camera0_scene", "mixed_scene", "screen0_scene"]:
            current_scene = tag
            i += 1
        else:
            i += 1
    return (seg_start, time_deleted, current_scene)

def process_scenes(start_time, markers, seg_start, time_deleted, current_scene):
    edit_markers = []
    manual_markers = []
    scenes = []
    i = 0
    while i < len(markers):
        (tm, tag) = markers[i]
        if tag == "safepoint":
            scenes.append((current_scene, seg_start - start_time, tm - start_time))
            seg_start = tm
            i += 1
            j = i
            while j < len(markers):
                if markers[j][1] in ("safepoint", "fastforward"):
                    break
                elif markers[j][1] == "rewind":
                    time_deleted += markers[j][0] - seg_start
                    seg_start = markers[j][0]
                    del markers[i:j + 1]
                    j = i
                elif markers[j][1] in ["camera0_scene", "mixed_scene", "screen0_scene"]:
                    current_scene = markers[j][1]
                    j += 1
                else:
                    print("Unknown tag '%s'" % markers[j][1])
                    sys.exit(1)
        elif tag in ["camera0_scene", "mixed_scene", "screen0_scene"]:
            scenes.append((current_scene, seg_start - start_time, tm - start_time))
            seg_start = tm
            current_scene = tag
            i += 1
        elif tag == "fastforward":
            t = seg_start - start_time - time_deleted
            if len(edit_markers) == 0 or edit_markers[-1] != t:
                edit_markers.append(t)
            scenes.append((current_scene, seg_start - start_time, tm - start_time))
            i += 1
            if i == len(markers):
                seg_start = None
                break
            seg_start = markers[i + 1][0]
        elif tag == "marker":
            manual_markers.append(tm - start_time - time_deleted)
            i += 1
        else:
            print("Unknown tag '%s'" % tag)
            sys.exit(1)
    if seg_start != None:
        c = subprocess.run([\
                "ffprobe",
                "-v", "error",
                "-i", "camera0.nut",
                "-select_streams", "a:0",
                "-show_entries", "format=duration",
                "-of", "default=noprint_wrappers=1:nokey=1"], \
            capture_output=True, stderr=None)
        assert c.returncode == 0
        last_frame_time = int(Decimal(c.stdout.decode().strip()) * 1000)
        scenes.append((current_scene, seg_start - start_time, last_frame_time - start_time))

    with open("edit_markers", "w") as f:
        for t in edit_markers:
            f.write("%s\n" % time.strftime("%H:%M:%S", time.gmtime(float(t) / 1000.0)))

    with open("manual_markers", "w") as f:
        for t in manual_markers:
            f.write("%s\n" % time.strftime("%H:%M:%S", time.gmtime(float(t) / 1000.0)))

    i = 0
    while i + 1 < len(scenes):
        if scenes[i][0] == scenes[i + 1][0] and scenes[i][2] == scenes[i + 1][1]:
            scenes[i] = (scenes[i][0], scenes[i][1], scenes[i + 1][2])
            del scenes[i + 1]
        else:
            i += 1

    return scenes

def scene_selects(start_time, scenes, scene):
    out = []
    for (i, (s, f, t)) in enumerate(scenes):
        if s != scene:
            continue
        out.append((f, t, f"scene_{i}.nut", f"between(t\\,{f / 1000.0}\\,{t / 1000.0})"))
    return out

def framerate_round(framerate, x):
    return round((1000.0 / framerate) * round(float(x)/(1000.0 / framerate)))

def scenes_with_delay(scenes, framerate, delay):
    return [(s[0], framerate_round(framerate, s[1] - delay), framerate_round(framerate, s[2] - delay)) for s in scenes]

def chunk(l, n):
    return (l[i:i + n] for i in range(0, len(l), n))

def main():
    if len(sys.argv) != 3:
        sys.stderr.write("Usage: markers_to_makefile <framerate> <auto|camera_latency_in_ms>\n")
        sys.exit(1)
    times = first_frame_times()
    framerate = int(sys.argv[1])
    if sys.argv[2] == "auto":
        start_time = times[0]
        audio_off = times[1] - times[0]
        screen_off = (audio_off + (times[2] - times[1])) / 1000.0
        delay = 0
    else:
        start_time = times[2]
        audio_off = int(sys.argv[2]) / 1000.0
        screen_off = (int(sys.argv[2]) + (times[2] - times[1])) / 1000.0
        delay = times[2] - times[0]

    if not os.path.exists("markers"):
        print("gte(t\\, 0)")
        sys.exit(0)

    markers = []
    with open("markers") as f:
        for l in f:
            l = l.strip()
            if len(l) == 0:
                continue
            l = l.split(" ")
            markers.append((int(float(l[0]) * 1000), l[1]))
    markers.sort(key=lambda x: x[0])

    remove_undos(markers)
    (seg_start, time_deleted, current_scene) = remove_first_rewinds(start_time, markers)
    scenes = process_scenes(start_time, markers, seg_start, time_deleted, current_scene)
    scenes = scenes_with_delay(scenes, framerate, delay)

    with open("Makefile", "w") as m:
        m.write(open("Makefile.header", "r").read())

        scene_paths = ["scene_%d.nut" % i for i in range(len(scenes))]
        m.write(f"""\npre_edit.nut: {" ".join(scene_paths)}""")

        audio_concat = []
        for i, (_, f, t) in enumerate(scenes):
            start = (t - f) / 1000 - AUDIO_FADE_TIME
            end = (t - f) / 1000
            beg = f"volume=enable='between(t, 0, {AUDIO_FADE_TIME})':volume='{AUDIO_FADE_PROPORTION} + {1-AUDIO_FADE_PROPORTION} * t * {1.0/AUDIO_FADE_PROPORTION}':eval=frame"
            end = f"volume=enable='between(t, {start}, {end})':volume='1 - {1-AUDIO_FADE_PROPORTION} * (t - {start}) * {1.0/AUDIO_FADE_PROPORTION}':eval=frame"
            audio_concat.append(f"[{i}:a:0]{beg}, \\\n\t      {end}[a_{i}];")
        audio_concat = " \\\n\t    ".join(audio_concat)
        concat = "".join([f"[{i}:v:0][a_{i}]" for i in range(len(scenes))])
        m.write(f"""
	ffmpeg -hide_banner \\
	  -i {" -i ".join(scene_paths)} \\
	  -filter_complex " \\
	    {audio_concat} \\
	    {concat}concat=n={len(scenes)}:v=1:a=1[v][a]" \\
	  -map "[a]" \\
	  -map "[v]" \\
	  -fflags +shortest -max_interleave_delta 0 -async 1 \\
	  -c:v libx264 -crf 0 -preset veryslow \\
	  -force_key_frames "expr:eq(mod(n,${{GOP}}),0)" -x264opts "rc-lookahead=${{GOP}}:keyint=${{GOP2}}:min-keyint=${{GOP}}" \\
	  -c:a flac -ar ${{AUDIO_RATE}} -sample_fmt ${{AUDIO_FMT}} -compression_level 9 \\
	  pre_edit.nut

camera0_test:
	ffmpeg -hide_banner \\
	  -i camera0.nut \\
	  -filter_complex " \\
	    [0:a]asetpts=N/SR/TB,pan=mono|c0=c0+c1[a]; \\
	    [0:v]fps=fps=${{FRAMERATE}}, \\
	      crop=${{MINI_CAMERA_CROP}}, \\
	      vaguedenoiser, \\
	      ${{CHROMAKEY}} \\
	    [camera0]; \\
	      color=c='${{BACKGROUND_COLOUR}}':r=${{FRAMERATE}}:s=${{CAMERA_RESOLUTION}} \\
	    [screen0]; \\
	    [screen0][camera0] \\
	      overlay=shortest=1:${{CAMERA_OVERLAY}} \\
	    [v]" \\
	  -map "[a]" -map "[v]" \\
	  -f nut -c:v libx264 -crf 0 -preset ultrafast -c:a flac - | ffplay -fs -

""")

        for ss in chunk(scene_selects(start_time, scenes, "camera0_scene"), MAKEFILE_CAMERA_CHUNKS):
            m.write(f"""{" ".join([x[2] for x in ss])}: camera0.nut
	ffmpeg -hide_banner \\
	  -i camera0.nut \\
	  -filter_complex " \\
	    [0:a] \\
	      asetpts=PTS+{audio_off}/TB, \\
	      asplit={str(len(ss))} \\
	    {"".join([f"[a_{x}]" for x in range(len(ss))])}; \\
	    [0:v] \\
	      fps=fps=${{FRAMERATE}}, \\
	      split={str(len(ss))} \\
	      {"".join([f"[camera0_{x}]" for x in range(len(ss))])}; \\""")

            for i, (f, t, path, select) in enumerate(ss):
                m.write(f"""
	    [a_{i}] \\
	      aselect='{select}', \\
	      asetpts=N/SR/TB \\
	    [a_{i}]; \\
	    [camera0_{i}] \\
	      select='{select}', \\
	      setpts=N/FRAME_RATE/TB, \\
	      crop=${{MINI_CAMERA_CROP}}, \\
	      vaguedenoiser, \\
	      ${{CHROMAKEY}} \\
	    [camera0_{i}]; \\
	      color=c='${{BACKGROUND_COLOUR}}':r=${{FRAMERATE}}:s=${{CAMERA_RESOLUTION}} \\
	    [screen0_{i}]; \\
	    [screen0_{i}][camera0_{i}] \\
	      overlay=shortest=1:${{CAMERA_OVERLAY}} \\
	    [v_{i}]""")
                if i < len(ss) - 1:
                    m.write("; \\")

            m.write("\" \\")
            for i, (f, t, path, select) in enumerate(ss):
                m.write(f"""
	  -map "[a_{i}]" \\
	  -map "[v_{i}]" \\
	  -fflags +shortest -max_interleave_delta 0 -async 1 \\
	  -c:v libx264 -crf 0 -preset superfast \\
	  -c:a flac -ar ${{AUDIO_RATE}} -sample_fmt ${{AUDIO_FMT}} -compression_level 1 \\
	    {path}""")
                if i < len(ss) - 1:
                    m.write(" \\")
                else:
                    m.write("\n")

        # Split apart screen0 for the mixed_scene
        for ss in chunk(scene_selects(start_time, scenes, "mixed_scene"), MAKEFILE_SCREEN_CHUNKS):
            m.write(f"""
{" ".join([f"{os.path.splitext(x[2])[0]}_screen0.nut" for x in ss])}: screen0.nut
	ffmpeg -hide_banner \\
	  -i camera0.nut \\
	  -i screen0.nut \\
	  -filter_complex " \\
	    [0:a] \\
	      asetpts=PTS+{audio_off}/TB, \\
	      asplit={str(len(ss))} \\
	    {"".join([f"[a_{x}]" for x in range(len(ss))])}; \\
	    [1:v] \\
	      setpts=PTS+{screen_off}/TB, \\
	      fps=fps=${{FRAMERATE}}, \\
	      split={str(len(ss))} \\
	     {"".join([f"[v_{x}]" for x in range(len(ss))])}; \\""")

            for i, (f, t, path, select) in enumerate(ss):
                m.write(f"""
	    [a_{i}] \\
	      aselect='{select}', \\
	      asetpts=N/SR/TB \\
	    [a_{i}]; \\
	    [v_{i}] \\
	      select='{select}', \\
	      setpts=N/FRAME_RATE/TB \\
	    [v_{i}]""")
                if i < len(ss) - 1:
                    m.write("; \\")
                else:
                    m.write("\" \\")

            for i, (f, t, path, select) in enumerate(ss):
                m.write(f"""
	  -map "[a_{i}]" \\
	  -map "[v_{i}]" \\
	  -fflags +shortest -max_interleave_delta 0 -async 1 \\
	  -c:v libx264 -crf 0 -preset superfast \\
	    {os.path.splitext(path)[0]}_screen0.nut""")
                if i < len(ss) - 1:
                    m.write(" \\")
                else:
                    m.write("\n")

        # Split apart camera0 for the mixed_scene
        for ss in chunk(scene_selects(start_time, scenes, "mixed_scene"), MAKEFILE_CAMERA_CHUNKS):
            m.write(f"""
{" ".join([f"{os.path.splitext(x[2])[0]}_camera0.nut" for x in ss])}: camera0.nut
	ffmpeg -hide_banner \\
	  -i camera0.nut \\
	  -filter_complex " \\
	    [0:a] \\
	      asetpts=PTS+{audio_off}/TB, \\
	      asplit={str(len(ss))} \\
	    {"".join([f"[a_{x}]" for x in range(len(ss))])}; \\
	    [0:v] \\
	      fps=fps=${{FRAMERATE}}, \\
	      split={str(len(ss))} \\
	    {"".join([f"[v_{x}]" for x in range(len(ss))])}; \\""")

            for i, (f, t, path, select) in enumerate(ss):
                m.write(f"""
	    [a_{i}] \\
	      aselect='{select}', \\
	      asetpts=N/SR/TB \\
	    [a_{i}]; \\
	    [v_{i}] \\
	      select='{select}', \\
	      setpts=N/FRAME_RATE/TB, \\
	      crop=${{MINI_CAMERA_CROP}}, \\
	      vaguedenoiser, \\
	      scale=${{MINI_CAMERA_SCALE}} \\
	    [v_{i}]""")
                if i < len(ss) - 1:
                    m.write("; \\")
                else:
                    m.write("\" \\")

            for i, (f, t, path, select) in enumerate(ss):
                m.write(f"""
	  -map "[a_{i}]" \\
	  -map "[v_{i}]" \\
	  -fflags +shortest -max_interleave_delta 0 -async 1 \\
	  -c:v libx264 -crf 0 -preset superfast \\
	    {os.path.splitext(path)[0]}_camera0.nut""")
                if i < len(ss) - 1:
                    m.write(" \\")
                else:
                    m.write("\n")

        for f, t, path, select in scene_selects(start_time, scenes, "mixed_scene"):
            m.write(f"""
{path}: {os.path.splitext(path)[0]}_camera0.nut {os.path.splitext(path)[0]}_screen0.nut
	ffmpeg -hide_banner \\
	  -i {os.path.splitext(path)[0]}_camera0.nut \\
	  -i {os.path.splitext(path)[0]}_screen0.nut \\
	  -filter_complex " \\
	    [0:a] \\
	      anull \\
	    [a]; \\
	    [0:v] \\
	      ${{CHROMAKEY}} \\
	    [camera0]; \\
	    [1:v] \\
	    [camera0] \\
	      overlay=shortest=1:${{CAMERA_OVERLAY}} \\
	    [v]" \\
	  -map "[a]" \\
	  -map "[v]" \\
	  -fflags +shortest -max_interleave_delta 0 -async 1 \\
	  -c:v libx264 -crf 0 -preset superfast \\
	  -c:a flac -ar ${{AUDIO_RATE}} -sample_fmt ${{AUDIO_FMT}} -compression_level 1 \\
	    {path}
""")

        for ss in chunk(scene_selects(start_time, scenes, "screen0_scene"), MAKEFILE_SCREEN_CHUNKS):
            m.write(f"""
{" ".join([x[2] for x in ss])}: camera0.nut screen0.nut
	ffmpeg -hide_banner \\
	  -i camera0.nut \\
	  -i screen0.nut \\
	  -filter_complex " \\
	    [0:a] \\
	      asetpts=PTS+{audio_off}/TB, \\
	      asplit={str(len(ss))} \\
	      {"".join([f"[a_{x}]" for x in range(len(ss))])}; \\
	    [1:v] \\
	      setpts=PTS+{screen_off}/TB, \
	      fps=fps=${{FRAMERATE}}, \\
	      split={str(len(ss))} \\
	      {"".join([f"[screen0_{x}]" for x in range(len(ss))])}; \\""")

            for i, (f, t, path, select) in enumerate(ss):
                m.write(f"""
	    [a_{i}] \\
	      aselect='{select}', \\
	      asetpts=N/SR/TB \\
	    [a_{i}]; \\
	    [screen0_{i}] \\
	      select='{select}', \\
	      setpts=N/FRAME_RATE/TB \\
	    [v_{i}]""")
                if i < len(ss) - 1:
                    m.write("; \\")

            for i, (f, t, path, select) in enumerate(ss):
                m.write(f"""" \\
	  -map "[a_{i}]" \\
	  -map "[v_{i}]" \\
	  -fflags +shortest -max_interleave_delta 0 -async 1 \\
	  -c:v libx264 -crf 0 -preset superfast \\
	  -c:a flac -ar ${{AUDIO_RATE}} -sample_fmt ${{AUDIO_FMT}} -compression_level 1 \\
	    {path}""")
                if i < len(ss) - 1:
                    m.write(" \\")
                else:
                    m.write("\n\n")

if __name__ == "__main__":
    main()
